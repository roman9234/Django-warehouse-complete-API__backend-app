
//список контейнеров
docker ps -a

//логи упавшего контейнера
docker logs django_app-app-1
docker-compose logs app-postgres

//
docker-compose exec app-postgres psql -U postgres -l

//перезапуск
docker-compose down && docker-compose up --build

//перезапуск в фоновом режиме
docker-compose down && docker-compose up --build


// Подключение к БД через контейнер
docker-compose exec app psql -h app-postgres -U postgres -d django_app -c "\conninfo"



//Проверка сети Docker
docker network inspect $(docker-compose ps -q app | xargs docker inspect -f '{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}')


Запуск контейнера с выводом всем переменных среды
docker-compose exec app env


Проверка что пользователь postgres существует
docker-compose exec app-postgres psql -U postgres -c "\du"


# Удалить неиспользуемые образы, контейнеры и сети
docker system prune -a -f --volumes

# Очистить builder cache (если используется buildx)
docker builder prune -a -f




Если ошибки с gitlab runner

nano /etc/gitlab-runner/config.toml
добавляем:
[runners.docker]
  pull_policy = "if-not-present"  # Не скачивать образы, если они уже есть
  disable_cache = false
  volumes = ["/cache"]
  cleanup_script = "docker system prune -f"  # Автоочистка после сборки